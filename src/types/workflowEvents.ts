/**
 * Represents an error message from the backend workflow.
 * Example: {"type": "error", "content": "Something went wrong."}
 */
export interface ErrorEvent {
  type: 'error';
  content: string;
}

/**
 * Signals the successful completion of the entire workflow.
 * Example: {"type": "complete", "content": "Workflow finished."}
 */
export interface CompleteEvent {
  type: 'complete';
  content: string;
}

/**
 * Represents an internal processing step in the workflow.
 * - event_status: "new" indicates a new step/card.
 * - event_status: "old" indicates an update to the current step's main content.
 * Example (new): {"type": "internal", "event_status": "new", "node": "Entity Extractor", "content": "Starting entity extraction..."}
 * Example (old): {"type": "internal", "event_status": "old", "node": "Entity Extractor", "content": "Entities extracted!"}
 */
export interface InternalEvent {
  type: 'internal';
  event_status: 'new' | 'old';
  node: string; // Name of the step/node, used as card title
  content: string; // Main textual content for this step
}

/**
 * Represents detailed content to be appended to the current internal step.
 * Always associated with the most recent "internal" event card.
 * Example: {"type": "internal_content", "event_status": "old", "node": "Entity Extractor", "content": ["Entity A", "Entity B"]}
 */
export interface InternalContentEvent {
  type: 'internal_content';
  event_status: 'old'; // This type always updates the current card
  node: string; // Name of the step/node (for context, should match current card)
  content: string[]; // Array of strings to display as sub-items
}

/**
 * Represents an answer generated by the workflow.
 * These are collected and displayed together at the end.
 * Example: {"type": "answer", "event_status": "new", "node": "Result Combiner", "content": {"summary": "Final summary.", "details": {...}}}
 */
export interface AnswerEvent {
  type: 'answer';
  event_status: 'new'; // Indicates a new piece of answer data
  node: string; // Originating node of the answer (for context)
  content: Record<string, unknown>; // The actual answer data, structured as a dictionary with flexible types
  // Note: 'unknown' is used here to indicate that the content can be of any type but to use it the implementation needs to specify
}

/**
 * Union type for all possible workflow stream events from the backend.
 */
export type WorkflowEvent =
  | ErrorEvent
  | CompleteEvent
  | InternalEvent
  | InternalContentEvent
  | AnswerEvent;

//
// --- State structures for the frontend ---
//

/**
 * Represents the state of a single workflow step card displayed in the UI.
 */
export interface WorkflowStepState {
  id: string; // A unique identifier for the step (e.g., nodeName + timestamp or index)
  nodeName: string; // Title of the step, from InternalEvent.node
  content: string; // Main content, from InternalEvent.content, updated on "old" status
  internalContent: string[]; // Additional content items like entities extracted or search queries, from InternalContentEvent.content
  isCurrent: boolean; // True if this is the active step being processed or expecting updates
  isCompleted: boolean; // True if this step has finished processing (either succeeded or a new step started)
  showDetails: boolean; // Controls individual card expansion state
  isLoading: boolean; // Shows a loader on this specific card if it's current and new content is expected
}

/**
 * Represents the structure of an answer collected from the stream, to be displayed later.
 */
export interface StoredAnswer {
  node: string; // From AnswerEvent.node, indicating which step produced this answer
  data: Record<string, unknown>; // From AnswerEvent.content, the actual answer payload
  receivedAt: Date; // Timestamp for ordering or debugging
}
